{"ast":null,"code":"export var sleep = function sleep(ms) {\n  return new Promise(function (ok) {\n    return setTimeout(ok, ms);\n  });\n};\nexport var getRandomInteger = function getRandomInteger(max) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport var pause = function pause() {\n  return sleep(getRandomInteger(100, 200));\n};\n/**\n * Takes an object like \n * ```\n * { name:'john', surname:'silver', guineas:400}\n * ```\n * and transforms it into a string like\n * ```\n * name=john&suname=silver&guineas=400\n * ```\n * This is a very simplistic function that will break on nested objects or arrays\n * @param {Object} params An Object containing all the keys\n * @returns {string} the query parameters string\n */\n\nexport var objectToQuery = function objectToQuery(params) {\n  return Object.keys(params).filter(function (key) {\n    return params[key] !== undefined && params[key] !== null;\n  }).map(function (key) {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n  }).join('&').trim();\n};\n/**\n * creates a url string with a query object\n * For example:\n * ```\n * const url = makeRequestUrl('/stardust',{a:1,username:'ziggy'})\n * ```\n * url in this case will be: `/stardust?a=1&username=ziggy`\n * @param {String} path the path that you want to request\n * @param {Object} params an object of parameters \n * @returns {string} the url\n */\n\nexport var makeRequestUrl = function makeRequestUrl(path, params) {\n  if (!params) {\n    return path;\n  }\n\n  var query = objectToQuery(params);\n\n  if (query.length) {\n    var has_interrogation_mark = path.indexOf('?') === 0;\n    var url = path + (has_interrogation_mark ? '&' : '?') + query;\n    return url;\n  }\n\n  return path;\n};","map":{"version":3,"sources":["/home/square/square/projects/blissfull-final-project/front/src/ControllerCMS/utils.js"],"names":["sleep","ms","Promise","ok","setTimeout","getRandomInteger","max","min","Math","floor","random","pause","objectToQuery","params","Object","keys","filter","key","undefined","map","encodeURIComponent","join","trim","makeRequestUrl","path","query","length","has_interrogation_mark","indexOf","url"],"mappings":"AAAA,OAAO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD;AAAA,SAAQ,IAAIC,OAAJ,CAAa,UAAAC,EAAE;AAAA,WAAIC,UAAU,CAACD,EAAD,EAAKF,EAAL,CAAd;AAAA,GAAf,CAAR;AAAA,CAAd;AACP,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD;AAAA,MAAMC,GAAN,uEAAU,CAAV;AAAA,SAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,GAAG,GAAGC,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA9D;AAAA,CAAzB;AACP,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAMX,KAAK,CAACK,gBAAgB,CAAC,GAAD,EAAK,GAAL,CAAjB,CAAX;AAAA,CAAd;AAEP;;;;;;;;;;;;;;AAaA,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM,EAAI;AACrC,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACNG,MADM,CACE,UAAAC,GAAG;AAAA,WAAIJ,MAAM,CAACI,GAAD,CAAN,KAAgBC,SAAhB,IAA6BL,MAAM,CAACI,GAAD,CAAN,KAAgB,IAAjD;AAAA,GADL,EAENE,GAFM,CAED,UAAAF,GAAG;AAAA,WAAIG,kBAAkB,CAACH,GAAD,CAAlB,GAA0B,GAA1B,GAAgCG,kBAAkB,CAACP,MAAM,CAACI,GAAD,CAAP,CAAtD;AAAA,GAFF,EAGNI,IAHM,CAGD,GAHC,EAINC,IAJM,EAAP;AAKD,CANM;AAQP;;;;;;;;;;;;AAWA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAOX,MAAP,EAAkB;AAC9C,MAAG,CAACA,MAAJ,EAAW;AAAE,WAAOW,IAAP;AAAa;;AAC1B,MAAMC,KAAK,GAAGb,aAAa,CAACC,MAAD,CAA3B;;AACA,MAAGY,KAAK,CAACC,MAAT,EAAgB;AACd,QAAMC,sBAAsB,GAAGH,IAAI,CAACI,OAAL,CAAa,GAAb,MAAsB,CAArD;AACA,QAAMC,GAAG,GAAGL,IAAI,IAAIG,sBAAsB,GAAG,GAAH,GAAS,GAAnC,CAAJ,GAA8CF,KAA1D;AACA,WAAOI,GAAP;AACD;;AACD,SAAOL,IAAP;AACD,CATM","sourcesContent":["export const sleep = (ms) => new Promise( ok => setTimeout(ok, ms))\nexport const getRandomInteger = (max, min=0) => Math.floor(Math.random() * (max - min + 1)) + min\nexport const pause = () => sleep(getRandomInteger(100,200))\n\n/**\n * Takes an object like \n * ```\n * { name:'john', surname:'silver', guineas:400}\n * ```\n * and transforms it into a string like\n * ```\n * name=john&suname=silver&guineas=400\n * ```\n * This is a very simplistic function that will break on nested objects or arrays\n * @param {Object} params An Object containing all the keys\n * @returns {string} the query parameters string\n */\nexport const objectToQuery = params => {\n  return Object.keys(params)\n  .filter( key => params[key] !== undefined && params[key] !== null)\n  .map( key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))\n  .join('&')\n  .trim();\n}\n\n/**\n * creates a url string with a query object\n * For example:\n * ```\n * const url = makeRequestUrl('/stardust',{a:1,username:'ziggy'})\n * ```\n * url in this case will be: `/stardust?a=1&username=ziggy`\n * @param {String} path the path that you want to request\n * @param {Object} params an object of parameters \n * @returns {string} the url\n */\nexport const makeRequestUrl = (path, params) => {\n  if(!params){ return path }\n  const query = objectToQuery(params)\n  if(query.length){\n    const has_interrogation_mark = path.indexOf('?') === 0 \n    const url = path + (has_interrogation_mark ? '&' : '?') + query;\n    return url\n  }\n  return path\n}"]},"metadata":{},"sourceType":"module"}